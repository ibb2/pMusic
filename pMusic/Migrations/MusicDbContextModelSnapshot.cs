// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pMusic.Database;

#nullable disable

namespace pMusic.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    partial class MusicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("pMusic.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Index")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastRatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastViewedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoudnessAnalysisVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("MusicAnalysisVersion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OriginallyAvailableAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentRatingKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentThumb")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rating")
                        .HasColumnType("TEXT");

                    b.Property<string>("RatingKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("SkipCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Studio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Thumb")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UltraBlurColorsId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserRating")
                        .HasColumnType("TEXT");

                    b.Property<string>("ViewCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.HasIndex("UltraBlurColorsId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("pMusic.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastRatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastViewedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RatingKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkipCount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Thumb")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UbcId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserRating")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ViewCount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UbcId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("pMusic.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("pMusic.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("pMusic.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("pMusic.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AudioChannels")
                        .HasColumnType("REAL");

                    b.Property<string>("AudioCodec")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Bitrate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrackId")
                        .IsUnique();

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("pMusic.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MediaId")
                        .IsUnique();

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("pMusic.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Composite")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastViewedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeafCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlaylistType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RatingKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Smart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("pMusic.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AddedAt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Art")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("GrandparentArt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GrandparentGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GrandparentKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GrandparentRatingKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GrandparentThumb")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GrandparentTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MusicAnalysisVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentRatingKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentStudio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentThumb")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RatingKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Thumb")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ParentGuid");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("pMusic.Models.UltraBlurColors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BottomLeft")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BottomRight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TopLeft")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TopRight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UltraBlurColors");
                });

            modelBuilder.Entity("pMusic.Models.Album", b =>
                {
                    b.HasOne("pMusic.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pMusic.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("pMusic.Models.UltraBlurColors", "UltraBlurColors")
                        .WithMany()
                        .HasForeignKey("UltraBlurColorsId");

                    b.Navigation("Artist");

                    b.Navigation("Image");

                    b.Navigation("UltraBlurColors");
                });

            modelBuilder.Entity("pMusic.Models.Artist", b =>
                {
                    b.HasOne("pMusic.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("pMusic.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("pMusic.Models.UltraBlurColors", "Ubc")
                        .WithMany()
                        .HasForeignKey("UbcId");

                    b.Navigation("Country");

                    b.Navigation("Image");

                    b.Navigation("Ubc");
                });

            modelBuilder.Entity("pMusic.Models.Genre", b =>
                {
                    b.HasOne("pMusic.Models.Album", null)
                        .WithMany("Genres")
                        .HasForeignKey("AlbumId");

                    b.HasOne("pMusic.Models.Artist", null)
                        .WithMany("Genres")
                        .HasForeignKey("ArtistId");
                });

            modelBuilder.Entity("pMusic.Models.Media", b =>
                {
                    b.HasOne("pMusic.Models.Track", "Track")
                        .WithOne("Media")
                        .HasForeignKey("pMusic.Models.Media", "TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("pMusic.Models.Part", b =>
                {
                    b.HasOne("pMusic.Models.Media", "Media")
                        .WithOne("Part")
                        .HasForeignKey("pMusic.Models.Part", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("pMusic.Models.Track", b =>
                {
                    b.HasOne("pMusic.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("pMusic.Models.Album", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("pMusic.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("pMusic.Models.Media", b =>
                {
                    b.Navigation("Part")
                        .IsRequired();
                });

            modelBuilder.Entity("pMusic.Models.Track", b =>
                {
                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
